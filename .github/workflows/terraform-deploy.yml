# .github/workflows/terraform-deploy.yml
# GitHub Actions workflow for deploying Azure gMSA Automation infrastructure

name: Deploy Azure gMSA Automation

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TERRAFORM_VERSION: '1.5.0'
  WORKING_DIRECTORY: './terraform'

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Auto-Format Terraform Files
        run: terraform fmt -recursive
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=okta-gmsa-automation.tfstate"
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: tf-plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_domain_admin_username: ${{ secrets.DOMAIN_ADMIN_USERNAME }}
          TF_VAR_domain_admin_password: ${{ secrets.DOMAIN_ADMIN_PASSWORD }}
          TF_VAR_webhook_auth_token: ${{ secrets.WEBHOOK_AUTH_TOKEN }}
          TF_VAR_domain_controller: ${{ secrets.DOMAIN_CONTROLLER }}
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out=tfplan || export exitcode=$?
          
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan Failed!"
            exit 1
          else
            exit 0
          fi
      
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        if: steps.tf-plan.outputs.exitcode == '2'
        with:
          name: tfplan
          path: ${{ env.WORKING_DIRECTORY }}/tfplan
          retention-days: 5
      
      - name: Create Plan Summary
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN_OUTPUT: ${{ steps.tf-plan.outputs.stdout }}
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.tf-plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${process.env.PLAN_OUTPUT}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      github.ref == 'refs/heads/main' && 
      (github.event_name == 'push' || github.event.inputs.action == 'apply')
    environment: 
      name: production
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Terraform Init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=okta-gmsa-automation.tfstate"
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ env.WORKING_DIRECTORY }}
      
      - name: Terraform Apply
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_domain_admin_username: ${{ secrets.DOMAIN_ADMIN_USERNAME }}
          TF_VAR_domain_admin_password: ${{ secrets.DOMAIN_ADMIN_PASSWORD }}
          TF_VAR_webhook_auth_token: ${{ secrets.WEBHOOK_AUTH_TOKEN }}
          TF_VAR_domain_controller: ${{ secrets.DOMAIN_CONTROLLER }}
        run: terraform apply -auto-approve tfplan
      
      - name: Get Webhook URI
        id: webhook
        run: |
          WEBHOOK_URI=$(terraform output -raw webhook_uri)
          echo "::add-mask::$WEBHOOK_URI"
          echo "webhook_uri=$WEBHOOK_URI" >> $GITHUB_OUTPUT
      
      - name: Store Webhook URI in GitHub Secret
        uses: actions/github-script@v7
        env:
          WEBHOOK_URI: ${{ steps.webhook.outputs.webhook_uri }}
        with:
          script: |
            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: 'AZURE_WEBHOOK_URI',
              encrypted_value: process.env.WEBHOOK_URI
            })
      
      - name: Deployment Summary
        run: |
          echo "## Deployment Successful! üöÄ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resources Created" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group**: $(terraform output -raw resource_group_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Automation Account**: $(terraform output -raw automation_account_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Key Vault**: $(terraform output -raw key_vault_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Runbook**: $(terraform output -raw runbook_name)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Register your Hybrid Runbook Worker" >> $GITHUB_STEP_SUMMARY
          echo "2. Test the runbook in Azure Portal" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure Okta Workflow with the webhook URI" >> $GITHUB_STEP_SUMMARY
          echo "4. The webhook URI has been stored in GitHub Secrets as \`AZURE_WEBHOOK_URI\`" >> $GITHUB_STEP_SUMMARY
  
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: 
      name: production-destroy
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Terraform Init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=okta-gmsa-automation.tfstate"
      
      - name: Terraform Destroy
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_domain_admin_username: ${{ secrets.DOMAIN_ADMIN_USERNAME }}
          TF_VAR_domain_admin_password: ${{ secrets.DOMAIN_ADMIN_PASSWORD }}
          TF_VAR_webhook_auth_token: ${{ secrets.WEBHOOK_AUTH_TOKEN }}
          TF_VAR_domain_controller: ${{ secrets.DOMAIN_CONTROLLER }}
        run: terraform destroy -auto-approve
